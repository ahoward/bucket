#! /usr/bin/env ruby

require 'yaml'
require 'rubygems'
require 'aws/s3'
require 'mime/types'
require 'main'


Main {

  name 'bucket'

  description <<-__ 
    bucket is an every day command-line tool for amazon's s3 service
  __

  examples <<-__
    . bucket Configure
    . bucket List

    . bucket create bucket_name
    . bucket store bucket_name file.jpg
    . bucket list bucket_name
    . bucket get bucket_name file.jpg > f.jpg
    . bucket delete bucket_name file.jpg
  __

  argument('name'){
    synopsis "the bucket name"
    required false
  }

  option('access_key_id', 'K'){
    default ENV['AMAZON_ACCESS_KEY_ID']||ENV['ACCESS_KEY_ID'] 
  }

  option('secret_access_key', 'S'){
    default ENV['AMAZON_SECRET_ACCESS_KEY']||ENV['SECRET_ACCESS_KEY'] 
  }

  option('namespace', 'n'){
    default 'drawohara.com'
  }

  option('access', 'a'){
    default 'public_read'
    cast :symbol 
  }

  option('force', 'f'){
    cast :bool
  }

  option('config', 'C'){
    argument_required
  }

  option('content_type', 'c'){
    argument_required
  }

  option('path_info', 'P'){
    default false
  }

  option('dirty', 'D'){
  }

  parameters.each{|parameter| fattr(parameter.name)}

  def run
    help!
  end

  mode :Configure do
    run do
      generate_config
    end
  end

  mode :List do
    run do
      puts AWS::S3::Service.buckets.map{|bucket| bucket.name}
    end
  end

  mode :create do
    run do
      AWS::S3::Bucket.create namespaced(name)
      puts "http://s3.amazonaws.com/#{ namespaced(name) }" ### HACKIY HACK
    end
  end

  mode :store do
    run do
      path = argv.shift or abort "no path"
      basename = File.basename path
      key = argv.shift || path
      key = File.basename key #unless path_info?
      key = clean key unless dirty?
      content_type = self.content_type || (MIME::Types.type_for(basename).first.content_type rescue 'text/plain')
      options = {
        :access => access,
        :content_type => content_type,
      }
      open(path, 'r+') do |fd|
        AWS::S3::S3Object.store key, fd, namespaced(name), options
      end
      puts AWS::S3::S3Object.url_for(key, namespaced(name), :authenticated => false)
    end
  end

  mode :list do
    run do
      AWS::S3::Bucket.find(namespaced(name)).objects.each do |object|
        puts object.url(:authenticated => false)
      end
    end
  end

  mode :get do
    run do
      key = argv.shift
      bucket = AWS::S3::Bucket.find(namespaced(name))
      if key
        object = bucket[key]
        if object
          path = argv.shift
          if path
            open(path, 'w'){|fd| fd.write(object.value)}
          else
            STDOUT.write(object.value)
          end
        end
      end
    end
  end

  mode :delete do
    run do
      unless argv.empty?
        key = argv.shift
        key = File.basename key unless path_info?
        key = clean key unless dirty?
        object = AWS::S3::Bucket.find(namespaced(name))[key]
        if object
          url = object.url :authenticated => false
          object.delete
          puts url
          exit(0)
        else
          exit(42)
        end
      end
      AWS::S3::Bucket.delete(namespaced(name), :force => force) 
    end
  end

  def before_run
    setup
    establish_connection
  end

  def setup
    load_config_yml
    self.class.fattrs.each{|attr| send(attr, params[attr].value) if params.has_key?(attr)}
  end

  def load_config_yml
    if params['config'].given?
      path = params['config'].value
    else
      path = default_config_path
    end
    if test(?e, path) or params['config'].given?
      config(( YAML.load IO.read(path) ))
      config.each{|k,v| send(k, v) rescue nil}
    end
  end

  def default_config_path
    home = File.expand_path '~'
    path = File.join home, '.bucket.yml'
  end

  def namespaced arg, *argv
    argv.unshift arg and [ namespace, argv ].compact.join('.')
  end

  def establish_connection
    AWS::S3::Base.establish_connection!(
      :access_key_id     => access_key_id, 
      :secret_access_key => secret_access_key
    )
  end

  def clean path
    path.strip.downcase.gsub(%r/[^\.\w\d_-]/o, '_').squeeze('_')
  end

  def generate_config
    path = config || default_config_path
    unless(not force and test(?e, path))
      open(path, 'w') do |fd|
        config = <<-yml
          access_key_id     : 'AMAZON_ACCESS_KEY_ID'
          secret_access_key : 'AMAZON_SECRET_ACCESS_KEY'
          namespace         : 'this_will_be_prepended_to_all_keys'
          ca_file           : '/full/path/to/precisely-named/aws-cert-HLI34MTJRZW5FKYNVLRUMAUEKBIZ3KL5.pem'
        yml
        formatted = config.split(%r/\n/).map{|line| line.strip}.join("\n")
        fd.puts formatted 
      end
      if STDIN.tty?
        editor = ENV['EDITOR'] || ENV['EDIT'] || 'open'
        system "#{ editor } #{ path }"
      end
      puts "generated #{ path }"
    else
      warn "exists #{ path }"
      exit 42
    end
  end
}
